#skim(expressionT)
par(mar=c(1,1,1,1))
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
expressionT <- as.data.frame(t(read.table("../data/expression.txt", row.names=1 )))
expression <- as.data.frame((read.table("../data/expression.txt", row.names=1 )))
subtypes <- read_delim("../data/subtypes.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
View(expression)
plot(expression)
plot(expressionT)
str(expressionT)
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
install.packages("cowplot")
install.packages("randomForest")
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
library(randomForest)
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
library(randomForest)
expressionT <- as.data.frame(t(read.table("../data/expression.txt", row.names=1 )))
expression <- as.data.frame((read.table("../data/expression.txt", row.names=1 )))
subtypes <- read_delim("../data/subtypes.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
test_exp <- as.data.frame((read.table("../data/clean_expression.txt", row.names=1 )))
test_sub <- read_tsv("../data/clean_subtypes.txt")
library(tidyverse)
test_exp <- as.data.frame((read.table("../data/clean_expression.txt", row.names=1 )))
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
dim(test_exp)
dim(test_truth)
dim(test_exp)
dim(test_sub)
test_exp <- as.data.frame(t(read.table("../data/clean_expression.txt", row.names=1 )))
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
dim(test_exp)
dim(test_sub)
dim(test_exp)
test_sub
test_exp
test_sub
rownames(test_exp)[1] <- '184A1'
test_exp
test_exp <- as.data.frameA(t(read.table("../data/clean_expression.txt", row.names=1 )))
test_exp <- as.data.frame(t(read.table("../data/clean_expression.txt", row.names=1 )))
rownames(test_exp)[1] <- '184A1'
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
test_exp
test_sub
sort.df <- with(test_sub,  test_sub[order(cellline) , ])
View(sort.df)
test_sub
testSort <- with(test_sub,  test_sub[order(cellline) , ])
merged<-cbind(testSort,test_exp)
merged
merged<-cbind(testSort,test_exp)
library(tidyverse)
test_exp <- as.data.frame(t(read.table("../data/clean_expression.txt", row.names=1 )))
rownames(test_exp)[1] <- '184A1'
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
test_sub
testSort <- with(test_sub,  test_sub[order(cellline) , ])
merged<-cbind(testSort,test_exp)
merged
write.table(expression, file= '../data/mergedExpression.txt', sep= '\t', na = 'NA'
merged<-cbind(testSort,test_exp)
#merged
write.table(expression, file= '../data/mergedExpression.txt', sep= '\t', na = 'NA')
set.seed(25000)
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
library(randomForest)
exp <- as.data.frame(read.table("../data/mergedExpression.txt", row.names=1 ))
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
library(parLapply)
install.packages("parLapply")
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
#library(parLapply)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(X)/slices))
# Read in the cleaned expression data
expression <- as.data.frame((read.table("../data/clean_expression.txt", row.names=1 )))
rownames(expression)[1] <- '184A1'# Rename the only integer name
# Read in the subtype data
subtypes <- read_tsv("../data/clean_subtypes.txt")
# Read in the truth set
truth_set <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
# Create merged feature set
featureSet<-cbind(subtypes[,2],t(expression))
# Read in the cleaned expression data
expression <- as.data.frame((read.table("../data/clean_expression.txt", row.names=1 )))
rownames(expression)[1] <- '184A1'# Rename the only integer name
# Read in the subtype data
subtypes <- read_tsv("../data/clean_subtypes.txt")
# Read in the truth set
truth_set <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
# Create merged feature set
featureSet<-cbind(subtypes[,2],t(expression))
#straping the first column of the truth set to the tree
truthSet
#straping the first column of the truth set to the tree
tree1<-cbind(drug=truth_set[,1],featureSet)
tree1
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(tree1)/slices))
idx <- idx[1:nrow(tree1)]
cl <- makeCluster(8)
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
library(snow)
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
library(parallel)
#library(parLapply)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(tree1)/slices))
idx <- idx[1:nrow(tree1)]
cl <- makeCluster(8)
clusterExport(cl, c('idx', 'slices', 'X', 'Y'))
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(tree1)/slices))
idx <- idx[1:nrow(tree1)]
cl <- makeCluster(8)
clusterExport(cl, c('idx', 'slices', 'tree1', 'Y'))
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(tree1)/slices))
idx <- idx[1:nrow(tree1)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(X[idx == slice, ], Y[idx == slice])
}))
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(tree1)/slices))
idx <- idx[1:nrow(tree1)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
#rfImpute(X[idx == slice, ], Y[idx == slice])
}))
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(tree1)/slices))
idx <- idx[1:nrow(tree1)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(tree1[idx == slice, ], drugs[idx == slice])
}))
#straping the first column of the truth set to the tree
tree1<-cbind(drug=truth_set[,1],featureSet)
tree1
roots<-as.matrix(tree1)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(roots)/slices))
idx <- idx[1:nrow(roots)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(roots[idx == slice, ], drugs[idx == slice])
}))
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(featureSet)/slices))
idx <- idx[1:nrow(featureSet)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(featureSet[idx == slice, ],truth_set[idx == slice])
}))
#straping the first column of the truth set to the tree
truth<-as.matrix(truth_set)
feature<-as.matrix(featureSet)
#tree1<-cbind(drug=truth_set[,1],featureSet)
#tree1
#roots<-as.matrix(tree1)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(featureSet)/slices))
idx <- idx[1:nrow(featureSet)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(featureSet[idx == slice, ],truth_set[idx == slice])
}))
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(feature)/slices))
idx <- idx[1:nrow(feature)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(feature[idx == slice, ],truth[idx == slice])
}))
#straping the first column of the truth set to the tree
tree1<-cbind(drug=truth_set[,1],featureSet)
tree1
roots<-as.matrix(tree1)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(roots)/slices))
idx <- idx[1:nrow(roots)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(roots[idx == slice, ])
}))
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
library(parallel)
library(dplyr)
#library(parLapply)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(roots)/slices))
idx <- idx[1:nrow(roots)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(roots[idx == slice, ])
}))
roots<-as.matrix(tree1)
data.imputed <- rfImpute(drug ~ ., data = roots, iter=4)
roots<-as.matrix(tree1)
#data.imputed <- rfImpute(drug ~ ., data = roots, iter=4)
model <- randomForest(drug ~ ., data=roots, proximity=TRUE)
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
library(parallel)
library(dplyr)
library(h2o)
install.packages("h2o")
set.seed(25000)
library(ggplot2)
library(cowplot)
library(randomForest)
library(parallel)
library(dplyr)
library(h2o)
#library(parLapply)
slices <- 8
idx <- rep(1:slices, each = ceiling(nrow(roots)/slices))
idx <- idx[1:nrow(roots)]
imputedData <- do.call('rbind', lapply(1:slices, function(SLICE){
print(SLICE)
require(randomForest)
rfImpute(roots[idx == slice, ])
}))
roots<-as.matrix(tree1)
#data.imputed <- rfImpute(drug ~ ., data = roots, iter=4)
model <- randomForest(drug ~ ., data=roots, proximity=TRUE)
