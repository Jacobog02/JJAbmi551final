#skim(expressionT)
par(mar=c(1,1,1,1))
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
expressionT <- as.data.frame(t(read.table("../data/expression.txt", row.names=1 )))
expression <- as.data.frame((read.table("../data/expression.txt", row.names=1 )))
subtypes <- read_delim("../data/subtypes.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
View(expression)
plot(expression)
plot(expressionT)
str(expressionT)
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
install.packages("cowplot")
install.packages("randomForest")
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
library(randomForest)
library(tidyverse)
library(infer)
library(skimr)
library(broom)
library(readxl)
library(knitr)
library(moderndive)
library(dplyr)
library(ggplot2)
library(GGally)
library(progress)
library(psych)
library(knitr)
library(ggfortify)
library(glmnet)
library(glmnetUtils)
library(caret)
library(class)
select <- dplyr::select
filter <- dplyr::filter
library(ggplot2)
library(cowplot)
library(randomForest)
expressionT <- as.data.frame(t(read.table("../data/expression.txt", row.names=1 )))
expression <- as.data.frame((read.table("../data/expression.txt", row.names=1 )))
subtypes <- read_delim("../data/subtypes.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
test_exp <- as.data.frame((read.table("../data/clean_expression.txt", row.names=1 )))
test_sub <- read_tsv("../data/clean_subtypes.txt")
library(tidyverse)
test_exp <- as.data.frame((read.table("../data/clean_expression.txt", row.names=1 )))
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
dim(test_exp)
dim(test_truth)
dim(test_exp)
dim(test_sub)
test_exp <- as.data.frame(t(read.table("../data/clean_expression.txt", row.names=1 )))
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
dim(test_exp)
dim(test_sub)
dim(test_exp)
test_sub
test_exp
test_sub
rownames(test_exp)[1] <- '184A1'
test_exp
test_exp <- as.data.frameA(t(read.table("../data/clean_expression.txt", row.names=1 )))
test_exp <- as.data.frame(t(read.table("../data/clean_expression.txt", row.names=1 )))
rownames(test_exp)[1] <- '184A1'
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
test_exp
test_sub
sort.df <- with(test_sub,  test_sub[order(cellline) , ])
View(sort.df)
test_sub
testSort <- with(test_sub,  test_sub[order(cellline) , ])
merged<-cbind(testSort,test_exp)
merged
merged<-cbind(testSort,test_exp)
library(tidyverse)
test_exp <- as.data.frame(t(read.table("../data/clean_expression.txt", row.names=1 )))
rownames(test_exp)[1] <- '184A1'
test_sub <- read_tsv("../data/clean_subtypes.txt")
test_truth <-  as.data.frame((read.table("../data/clean_training_answers.txt", row.names=1 )))
test_sub
testSort <- with(test_sub,  test_sub[order(cellline) , ])
merged<-cbind(testSort,test_exp)
merged
write.table(expression, file= '../data/mergedExpression.txt', sep= '\t', na = 'NA'
merged<-cbind(testSort,test_exp)
#merged
write.table(expression, file= '../data/mergedExpression.txt', sep= '\t', na = 'NA')
